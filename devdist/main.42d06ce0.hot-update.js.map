{"version":3,"sources":["webpack://codex-frontend/./src/components/filterFields/PointDistanceFilter.jsx","webpack://codex-frontend/./src/components/filterFields/mapUtils/PointDistanceMap.jsx","webpack://codex-frontend/webpack/runtime/getFullHash"],"names":["inputWidth","PointDistanceFilter","label","labelId","description","descriptionId","filterId","defaultDistance","clause","queryTerm","onChange","style","nested","rest","intl","useIntl","theme","useTheme","useState","distance","setDistance","latitude","setLatitude","longitude","setLongitude","gpsForMapUpdate","setGpsForMapUpdate","modalOpen","setModalOpen","onClose","translatedLabel","formatMessage","id","display","justifyContent","color","palette","text","secondary","marginLeft","minWidth","height","marginBottom","lat","lng","toString","marginTop","alignItems","width","marginRight","e","inputValue","target","value","_","newDistance","padding","descriptor","query","geo_distance","parseFloat","lastMarker","lastCircle","PointDistanceMap","gps","mapObject","setMapObject","mapsApi","setMapsApi","draw","setMap","markerPosition","LatLng","circle","Circle","center","radius","strokeColor","strokeWeight","strokeOpacity","fillColor","fillOpacity","marker","Marker","position","useEffect","setOptions","get","maxWidth","maxHeight","key","googleMapsApiKey","minZoom","map","maps"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;;AAEA,IAAMA,UAAU,GAAG,GAAnB;AAEe,SAASC,mBAAT,OAaZ;AAAA,MAZDC,KAYC,QAZDA,KAYC;AAAA,MAXDC,OAWC,QAXDA,OAWC;AAAA,MAVDC,WAUC,QAVDA,WAUC;AAAA,MATDC,aASC,QATDA,aASC;AAAA,MARDC,QAQC,QARDA,QAQC;AAAA,kCAPDC,eAOC;AAAA,MAPDA,eAOC,qCAPiB,EAOjB;AAAA,yBANDC,MAMC;AAAA,MANDA,MAMC,4BANQ,QAMR;AAAA,MALDC,SAKC,QALDA,SAKC;AAAA,MAJDC,QAIC,QAJDA,QAIC;AAAA,MAHDC,KAGC,QAHDA,KAGC;AAAA,yBAFDC,MAEC;AAAA,MAFDA,MAEC,4BAFQ,KAER;AAAA,MADEC,IACF;;AACD,MAAMC,IAAI,GAAGC,oDAAO,EAApB;AACA,MAAMC,KAAK,GAAGC,kEAAQ,EAAtB;;AAEA,kBAAgCC,+CAAQ,CAACX,eAAD,CAAxC;AAAA;AAAA,MAAOY,QAAP;AAAA,MAAiBC,WAAjB;;AACA,mBAAgCF,+CAAQ,CAAC,EAAD,CAAxC;AAAA;AAAA,MAAOG,QAAP;AAAA,MAAiBC,WAAjB;;AACA,mBAAkCJ,+CAAQ,CAAC,EAAD,CAA1C;AAAA;AAAA,MAAOK,SAAP;AAAA,MAAkBC,YAAlB;;AACA,mBAA8CN,+CAAQ,CAAC,EAAD,CAAtD;AAAA;AAAA,MAAOO,eAAP;AAAA,MAAwBC,kBAAxB;;AACA,mBAAkCR,+CAAQ,CAAC,KAAD,CAA1C;AAAA;AAAA,MAAOS,SAAP;AAAA,MAAkBC,YAAlB;;AAEA,MAAMC,OAAO,GAAG,SAAVA,OAAU;AAAA,WAAMD,YAAY,CAAC,KAAD,CAAlB;AAAA,GAAhB;;AAEA,MAAME,eAAe,GAAG3B,OAAO,GAC3BW,IAAI,CAACiB,aAAL,CAAmB;AAAEC,MAAE,EAAE7B;AAAN,GAAnB,CAD2B,GAE3BD,KAFJ;AAIA,SACE;AACE,SAAK;AACH+B,aAAO,EAAE,MADN;AAEHC,oBAAc,EAAE;AAFb,OAGAvB,KAHA,CADP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAOE,oDAAC,0CAAD;AAAM,SAAK,EAAE;AAAEwB,WAAK,EAAEnB,KAAK,CAACoB,OAAN,CAAcC,IAAd,CAAmBC;AAA5B,KAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGR,eADH,CAPF,EAUE,oDAAC,4CAAD;AACE,QAAI,EAAC,OADP;AAEE,WAAO,EAAE;AAAA,aAAMF,YAAY,CAAC,IAAD,CAAlB;AAAA,KAFX;AAGE,SAAK,EAAE;AAAEW,gBAAU,EAAE,CAAd;AAAiBC,cAAQ,EAAE,EAA3B;AAA+BC,YAAM,EAAE;AAAvC,KAHT;AAIE,MAAE,EAAC;AAJL,KAKM5B,IALN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAVF,EAiBE,oDAAC,oDAAD;AACE,QAAI,EAAEc,SADR;AAEE,WAAO,EAAEE,OAFX;AAGE,WAAO,EAAC,iBAHV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAKE,oDAAC,qEAAD;AAAe,SAAK,EAAE;AAAEa,kBAAY,EAAE;AAAhB,KAAtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,oDAAC,+DAAD;AACE,OAAG,EAAEjB,eADP;AAEE,YAAQ,EAAEN,QAFZ;AAGE,YAAQ,EAAE,yBAAkB;AAAA,UAAfwB,GAAe,SAAfA,GAAe;AAAA,UAAVC,GAAU,SAAVA,GAAU;AAC1BtB,iBAAW,CAACqB,GAAG,CAACE,QAAJ,EAAD,CAAX;AACArB,kBAAY,CAACoB,GAAG,CAACC,QAAJ,EAAD,CAAZ;AACD,KANH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,EASE,oDAAC,0CAAD;AACE,MAAE,EAAC,qBADL;AAEE,WAAO,EAAC,IAFV;AAGE,SAAK,EAAE;AAAEC,eAAS,EAAE;AAAb,KAHT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IATF,EAcE;AAAK,SAAK,EAAE;AAAEb,aAAO,EAAE,MAAX;AAAmBc,gBAAU,EAAE;AAA/B,KAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,oDAAC,iEAAD;AACE,SAAK,EAAE;AAAEC,WAAK,EAAEhD,UAAT;AAAqBiD,iBAAW,EAAE;AAAlC,KADT;AAEE,MAAE,EAAC,cAFL;AAGE,SAAK,EAAEnC,IAAI,CAACiB,aAAL,CAAmB;AAAEC,QAAE,EAAE;AAAN,KAAnB,CAHT;AAIE,SAAK,EAAEX,QAJT;AAKE,YAAQ,EAAE,kBAAA6B,CAAC,EAAI;AACb,UAAMC,UAAU,GAAGD,CAAC,CAACE,MAAF,CAASC,KAA5B;AACA/B,iBAAW,CAAC6B,UAAD,CAAX;AACA,UAAI5B,SAAJ,EACEG,kBAAkB,CAAC,CAACyB,UAAD,EAAa5B,SAAb,CAAD,CAAlB;AACH,KAVH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,EAaE,oDAAC,iEAAD;AACE,SAAK,EAAE;AAAEyB,WAAK,EAAEhD;AAAT,KADT;AAEE,MAAE,EAAC,eAFL;AAGE,SAAK,EAAEc,IAAI,CAACiB,aAAL,CAAmB;AAAEC,QAAE,EAAE;AAAN,KAAnB,CAHT;AAIE,SAAK,EAAET,SAJT;AAKE,YAAQ,EAAE,kBAAA2B,CAAC,EAAI;AACb,UAAMC,UAAU,GAAGD,CAAC,CAACE,MAAF,CAASC,KAA5B;AACA7B,kBAAY,CAAC2B,UAAD,CAAZ;AACA,UAAI9B,QAAJ,EACEK,kBAAkB,CAAC,CAACL,QAAD,EAAW8B,UAAX,CAAD,CAAlB;AACH,KAVH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAbF,CAdF,EAwCE,oDAAC,0CAAD;AACE,MAAE,EAAC,qBADL;AAEE,WAAO,EAAC,IAFV;AAGE,SAAK,EAAE;AAAEL,eAAS,EAAE;AAAb,KAHT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAxCF,EA6CE,oDAAC,8DAAD;AACE,SAAK,EAAE;AAAEA,eAAS,EAAE,EAAb;AAAiBE,WAAK,EAAEhD,UAAU,GAAG,CAAb,GAAiB;AAAzC,KADT;AAEE,SAAK,EAAEmB,QAFT;AAGE,OAAG,EAAE,CAHP;AAIE,OAAG,EAAE,GAJP;AAKE,YAAQ,EAAE,kBAACmC,CAAD,EAAIC,WAAJ,EAAoB;AAC5BnC,iBAAW,CAACmC,WAAD,CAAX;AACD,KAPH;AAQE,qBAAiB,EAAC,IARpB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IA7CF,CALF,EA6DE,oDAAC,qEAAD;AAAe,SAAK,EAAE;AAAEC,aAAO,EAAE;AAAX,KAAtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,oDAAC,4CAAD;AAAQ,WAAO,EAAC,OAAhB;AAAwB,WAAO,EAAE3B,OAAjC;AAA0C,MAAE,EAAC,QAA7C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,EAEE,oDAAC,4CAAD;AACE,WAAO,EAAC,SADV;AAEE,WAAO,EAAE,mBAAM;AACbnB,cAAQ,CAAC;AACPJ,gBAAQ,EAARA,QADO;AAEPmD,kBAAU,YAAK3B,eAAL,eAAyBX,QAAzB,OAFH;AAGPP,cAAM,EAANA,MAHO;AAIPJ,cAAM,EAANA,MAJO;AAKPkD,aAAK,EAAE;AACLC,sBAAY,EAAE;AACZxC,oBAAQ,YAAKA,QAAL;AADE,aAETV,SAFS,EAEG,CACXmD,UAAU,CAACvC,QAAD,CADC,EAEXuC,UAAU,CAACrC,SAAD,CAFC,CAFH;AADP;AALA,OAAD,CAAR;AAeAM,aAAO;AACR,KAnBH;AAoBE,MAAE,EAAC,SApBL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAFF,CA7DF,CAjBF,CADF;AA2GD;;cAxIuB5B,mB;UAcTc,gD,EACCE,8D;;;;;;;;;;;;0BAjBVjB,U;0BAEkBC,mB;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AChBxB;AACA;AACA;AACA;;AAEA,IAAI4D,UAAU,GAAG,IAAjB;AACA,IAAIC,UAAU,GAAG,IAAjB;AAEA;;AACe,SAASC,gBAAT,OAKZ;AAAA,2BAJD5C,QAIC;AAAA,MAJDA,QAIC,8BAJU,EAIV;AAAA,MAHD6C,GAGC,QAHDA,GAGC;AAAA,MAFDtD,QAEC,QAFDA,QAEC;AAAA,MADEG,IACF;;AACD,kBAAkCK,+CAAQ,CAAC,IAAD,CAA1C;AAAA;AAAA,MAAO+C,SAAP;AAAA,MAAkBC,YAAlB;;AACA,mBAA8BhD,+CAAQ,CAAC,IAAD,CAAtC;AAAA;AAAA,MAAOiD,OAAP;AAAA,MAAgBC,UAAhB;;AAEA,WAASC,IAAT,CAAc1B,GAAd,EAAmBC,GAAnB,EAAwB;AACtB,QAAIiB,UAAJ,EAAgBA,UAAU,CAACS,MAAX,CAAkB,IAAlB,EADM,CACmB;;AACzC,QAAIR,UAAJ,EAAgBA,UAAU,CAACQ,MAAX,CAAkB,IAAlB,EAFM,CAEmB;;AAEzC,QAAMC,cAAc,GAAG,IAAIJ,OAAO,CAACK,MAAZ,CAAmB7B,GAAnB,EAAwBC,GAAxB,CAAvB;AAEA,QAAM6B,MAAM,GAAG,IAAIN,OAAO,CAACO,MAAZ,CAAmB;AAChCC,YAAM,EAAEJ,cADwB;AAEhCK,YAAM,EAAE,OAAOzD,QAFiB;AAGhC0D,iBAAW,EAAE,SAHmB;AAIhCC,kBAAY,EAAE,CAJkB;AAKhCC,mBAAa,EAAE,GALiB;AAMhCC,eAAS,EAAE,SANqB;AAOhCC,iBAAW,EAAE;AAPmB,KAAnB,CAAf;AAUAR,UAAM,CAACH,MAAP,CAAcL,SAAd;AAEA,QAAMiB,MAAM,GAAG,IAAIf,OAAO,CAACgB,MAAZ,CAAmB;AAChCC,cAAQ,EAAEb;AADsB,KAAnB,CAAf;AAGAW,UAAM,CAACZ,MAAP,CAAcL,SAAd;AAEAJ,cAAU,GAAGqB,MAAb;AACApB,cAAU,GAAGW,MAAb;AACD;;AAEDY,kDAAS,CACP,YAAM;AACJ,QAAIvB,UAAJ,EAAgB;AACdA,gBAAU,CAACwB,UAAX,CAAsB;AACpBV,cAAM,EAAE,OAAOzD;AADK,OAAtB;AAGD;AACF,GAPM,EAQP,CAACA,QAAD,CARO,CAAT;AAWAkE,kDAAS,CACP,YAAM;AACJ,QAAM1C,GAAG,GAAG4C,kDAAG,CAACvB,GAAD,EAAM,GAAN,CAAf;AACA,QAAMpB,GAAG,GAAG2C,kDAAG,CAACvB,GAAD,EAAM,GAAN,CAAf;AACA,QAAIrB,GAAG,IAAIC,GAAX,EAAgByB,IAAI,CAACT,UAAU,CAACjB,GAAD,CAAX,EAAkBiB,UAAU,CAAChB,GAAD,CAA5B,CAAJ;AACjB,GALM,EAMP,CAACoB,GAAD,CANO,CAAT;AASA,SACE;AACE,SAAK,EAAE;AACLvB,YAAM,EAAE,GADH;AAELO,WAAK,EAAE,GAFF;AAGLwC,cAAQ,EAAE,MAHL;AAILC,eAAS,EAAE;AAJN,KADT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAQE,mDAAC,qDAAD;AACE,oBAAgB,EAAE;AAAEC,SAAG,EAAEC,gEAAgBA;AAAvB,KADpB;AAEE,iBAAa,EAAE;AACbhD,SAAG,EAAE,CADQ;AAEbC,SAAG,EAAE;AAFQ,KAFjB;AAME,eAAW,EAAE,GANf;AAOE,WAAO,EAAE;AAAEgD,aAAO,EAAE;AAAX,KAPX;AAQE,WAAO,EAAE,wBAAkB;AAAA,UAAfjD,GAAe,SAAfA,GAAe;AAAA,UAAVC,GAAU,SAAVA,GAAU;AACzBlC,cAAQ,CAAC;AAAEiC,WAAG,EAAHA,GAAF;AAAOC,WAAG,EAAHA;AAAP,OAAD,CAAR;AACAyB,UAAI,CAAC1B,GAAD,EAAMC,GAAN,CAAJ;AACD,KAXH;AAYE,sCAAkC,MAZpC;AAaE,qBAAiB,EAAE,kCAAmB;AAAA,UAAhBiD,GAAgB,SAAhBA,GAAgB;AAAA,UAAXC,IAAW,SAAXA,IAAW;AACpC5B,kBAAY,CAAC2B,GAAD,CAAZ;AACAzB,gBAAU,CAAC0B,IAAD,CAAV;AACD;AAhBH,KAiBMjF,IAjBN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KARF,CADF;AA8BD;;cAtFuBkD,gB;;;;;;;;;;;0BAJpBF,U;0BACAC,U;0BAGoBC,gB;;;;;;;;;;;;;;;;;;UCTxB,0C","file":"main.42d06ce0.hot-update.js","sourcesContent":["import React, { useState } from 'react';\nimport { useIntl } from 'react-intl';\n\nimport { useTheme } from '@material-ui/core/styles';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport DialogActions from '@material-ui/core/DialogActions';\nimport TextField from '@material-ui/core/TextField';\nimport Slider from '@material-ui/core/Slider';\n\nimport PointDistanceMap from './mapUtils/PointDistanceMap';\nimport Button from '../Button';\nimport Text from '../Text';\nimport StandardDialog from '../StandardDialog';\n\nconst inputWidth = 220;\n\nexport default function PointDistanceFilter({\n  label,\n  labelId,\n  description,\n  descriptionId,\n  filterId,\n  defaultDistance = 50,\n  clause = 'filter',\n  queryTerm,\n  onChange,\n  style,\n  nested = false,\n  ...rest\n}) {\n  const intl = useIntl();\n  const theme = useTheme();\n\n  const [distance, setDistance] = useState(defaultDistance);\n  const [latitude, setLatitude] = useState('');\n  const [longitude, setLongitude] = useState('');\n  const [gpsForMapUpdate, setGpsForMapUpdate] = useState([]);\n  const [modalOpen, setModalOpen] = useState(false);\n\n  const onClose = () => setModalOpen(false);\n\n  const translatedLabel = labelId\n    ? intl.formatMessage({ id: labelId })\n    : label;\n\n  return (\n    <div\n      style={{\n        display: 'flex',\n        justifyContent: 'space-between',\n        ...style,\n      }}\n    >\n      <Text style={{ color: theme.palette.text.secondary }}>\n        {translatedLabel}\n      </Text>\n      <Button\n        size=\"small\"\n        onClick={() => setModalOpen(true)}\n        style={{ marginLeft: 8, minWidth: 48, height: 36 }}\n        id=\"SET\"\n        {...rest}\n      />\n      <StandardDialog\n        open={modalOpen}\n        onClose={onClose}\n        titleId=\"SELECT_LOCATION\"\n      >\n        <DialogContent style={{ marginBottom: 24 }}>\n          <PointDistanceMap\n            gps={gpsForMapUpdate}\n            distance={distance}\n            onChange={({ lat, lng }) => {\n              setLatitude(lat.toString());\n              setLongitude(lng.toString());\n            }}\n          />\n          <Text\n            id=\"SEARCH_CENTER_POINT\"\n            variant=\"h6\"\n            style={{ marginTop: 12 }}\n          />\n          <div style={{ display: 'flex', alignItems: 'center' }}>\n            <TextField\n              style={{ width: inputWidth, marginRight: 16 }}\n              id=\"gps-latitude\"\n              label={intl.formatMessage({ id: 'DECIMAL_LATITUDE' })}\n              value={latitude}\n              onChange={e => {\n                const inputValue = e.target.value;\n                setLatitude(inputValue);\n                if (longitude)\n                  setGpsForMapUpdate([inputValue, longitude]);\n              }}\n            />\n            <TextField\n              style={{ width: inputWidth }}\n              id=\"gps-longitude\"\n              label={intl.formatMessage({ id: 'DECIMAL_LONGITUDE' })}\n              value={longitude}\n              onChange={e => {\n                const inputValue = e.target.value;\n                setLongitude(inputValue);\n                if (latitude)\n                  setGpsForMapUpdate([latitude, inputValue]);\n              }}\n            />\n          </div>\n          <Text\n            id=\"SEARCH_RADIUS_LABEL\"\n            variant=\"h6\"\n            style={{ marginTop: 12 }}\n          />\n          <Slider\n            style={{ marginTop: 48, width: inputWidth * 2 + 16 }}\n            value={distance}\n            min={1}\n            max={500}\n            onChange={(_, newDistance) => {\n              setDistance(newDistance);\n            }}\n            valueLabelDisplay=\"on\"\n          />\n        </DialogContent>\n        <DialogActions style={{ padding: '0px 24px 24px 24px' }}>\n          <Button display=\"basic\" onClick={onClose} id=\"CANCEL\" />\n          <Button\n            display=\"primary\"\n            onClick={() => {\n              onChange({\n                filterId,\n                descriptor: `${translatedLabel}: ${distance}km`,\n                nested,\n                clause,\n                query: {\n                  geo_distance: {\n                    distance: `${distance}km`,\n                    [queryTerm]: [\n                      parseFloat(latitude),\n                      parseFloat(longitude),\n                    ],\n                  },\n                },\n              });\n              onClose();\n            }}\n            id=\"CONFIRM\"\n          />\n        </DialogActions>\n      </StandardDialog>\n    </div>\n  );\n}\n","import React, { useEffect, useState } from 'react';\nimport { get } from 'lodash-es';\nimport GoogleMapReact from 'google-map-react';\nimport { googleMapsApiKey } from '../../../constants/apiKeys';\n\nlet lastMarker = null;\nlet lastCircle = null;\n\n/* component expects distance in kilometers */\nexport default function PointDistanceMap({\n  distance = 50,\n  gps,\n  onChange,\n  ...rest\n}) {\n  const [mapObject, setMapObject] = useState(null);\n  const [mapsApi, setMapsApi] = useState(null);\n\n  function draw(lat, lng) {\n    if (lastMarker) lastMarker.setMap(null); // remove old marker\n    if (lastCircle) lastCircle.setMap(null); // remove old circle\n\n    const markerPosition = new mapsApi.LatLng(lat, lng);\n\n    const circle = new mapsApi.Circle({\n      center: markerPosition,\n      radius: 1000 * distance,\n      strokeColor: '#000000',\n      strokeWeight: 2,\n      strokeOpacity: 0.8,\n      fillColor: '#000000',\n      fillOpacity: 0.35,\n    });\n\n    circle.setMap(mapObject);\n\n    const marker = new mapsApi.Marker({\n      position: markerPosition,\n    });\n    marker.setMap(mapObject);\n\n    lastMarker = marker;\n    lastCircle = circle;\n  }\n\n  useEffect(\n    () => {\n      if (lastCircle) {\n        lastCircle.setOptions({\n          radius: 1000 * distance,\n        });\n      }\n    },\n    [distance],\n  );\n\n  useEffect(\n    () => {\n      const lat = get(gps, '0');\n      const lng = get(gps, '1');\n      if (lat && lng) draw(parseFloat(lat), parseFloat(lng));\n    },\n    [gps],\n  );\n\n  return (\n    <div\n      style={{\n        height: 400,\n        width: 500,\n        maxWidth: '100%',\n        maxHeight: '50vh',\n      }}\n    >\n      <GoogleMapReact\n        bootstrapURLKeys={{ key: googleMapsApiKey }}\n        defaultCenter={{\n          lat: 0,\n          lng: 0,\n        }}\n        defaultZoom={1.3}\n        options={{ minZoom: 1 }}\n        onClick={({ lat, lng }) => {\n          onChange({ lat, lng });\n          draw(lat, lng);\n        }}\n        yesIWantToUseGoogleMapApiInternals\n        onGoogleApiLoaded={({ map, maps }) => {\n          setMapObject(map);\n          setMapsApi(maps);\n        }}\n        {...rest}\n      />\n    </div>\n  );\n}\n","__webpack_require__.h = () => (\"ea4bf204\")"],"sourceRoot":""}