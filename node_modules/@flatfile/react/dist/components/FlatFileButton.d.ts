import FlatfileImporter, { FieldHookCallback } from '@flatfile/adapter';
import CustomerObject from '@flatfile/adapter/build/main/obj.customer';
import LoadOptionsObject from '@flatfile/adapter/build/main/obj.load-options';
import { IDataHookResponse } from '@flatfile/adapter/build/main/obj.validation-response';
import FlatfileResults from '@flatfile/adapter/build/main/results';
import React, { FC } from 'react';
import { IBeforeFetchRequest, IBeforeFetchResponse, IDictionary, ScalarDictionaryWithCustom } from '../interfaces/general';
import { ISettings } from '../interfaces/settings';
export declare type FlatfileButtonProps = React.DetailedHTMLProps<React.ButtonHTMLAttributes<HTMLButtonElement>, HTMLButtonElement> & {
    settings: ISettings;
    licenseKey: string;
    customer: CustomerObject;
    onBeforeFetch?: (req: IBeforeFetchRequest) => IBeforeFetchResponse;
    onCancel?: () => void;
    onData?: (results: FlatfileResults) => Promise<string | void>;
    onRecordChange?: (data: ScalarDictionaryWithCustom, index: number) => IDataHookResponse | Promise<IDataHookResponse>;
    onRecordInit?: (data: ScalarDictionaryWithCustom, index: number) => IDataHookResponse | Promise<IDataHookResponse>;
    fieldHooks?: IDictionary<FieldHookCallback>;
    render?: (importer: FlatfileImporter, launch: () => void) => React.ReactElement;
    source?: LoadOptionsObject['source'];
    mountUrl?: string;
};
declare const FlatfileButton: FC<FlatfileButtonProps>;
export default FlatfileButton;
